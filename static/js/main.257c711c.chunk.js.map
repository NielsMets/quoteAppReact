{"version":3,"sources":["components/QuoteAndAuthor.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteAndAuthor","props","quote","author","randomQuote","bgColor","className","style","color","backgroundColor","onClick","App","useState","num","setNum","quotes","setQuote","setAuthor","setBgColor","useEffect","randomListIndex","randomHSL","h","hMin","s","sMin","l","lMin","randomNum","max","min","Math","floor","random","list","i","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAEe,SAASA,EAAeC,GAAQ,IAC9BC,EAAwCD,EAA/CC,MAAcC,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,YAAaC,EAAYJ,EAAZI,QAC3C,OACE,sBAAKC,UAAU,iBAAiBC,MAAO,CAAEC,MAAOH,GAAhD,UACE,6BAAKH,IACL,sBAAKI,UAAU,SAAf,UACE,qBAAKA,UAAU,OAAOC,MAAO,CAAEE,gBAAiBJ,KAChD,4BAAIF,OAEN,wBACEO,QAAS,kBAAMN,KACfG,MAAO,CAAEE,gBAAiBJ,GAF5B,0B,iBCsDSM,MA5Df,WAAe,MAESC,mBAAS,GAFlB,mBAENC,EAFM,KAEDC,EAFC,OAGaF,mBAASG,EAAOA,OAAO,GAAGb,OAHvC,mBAGNA,EAHM,KAGCc,EAHD,OAIeJ,mBAASG,EAAOA,OAAO,GAAGZ,QAJzC,mBAINA,EAJM,KAIEc,EAJF,OAKiBL,mBAAS,SAL1B,mBAKNP,EALM,KAKGa,EALH,KAObC,qBAAU,WACRf,MACC,IAGH,IAAMA,EAAc,WAClB,IAAIS,EAAMO,EAAgBL,EAAOA,QAEjCC,EAASD,EAAOA,OAAOF,GAAKX,OAC5Be,EAAUF,EAAOA,OAAOF,GAAKV,QAC7Be,EAAWG,EAAU,IAAK,EAAG,GAAI,EAAG,GAAI,MAIpCA,EAAY,SAACC,EAAGC,EAAMC,EAAGC,EAAMC,EAAGC,GACtC,IAAIC,EAAY,SAACC,EAAKC,GACpB,IAAIjB,EAAMkB,KAAKC,MAAMD,KAAKE,SAAWJ,GAIrC,OAHIhB,EAAMiB,IACRjB,EAAMiB,GAEDjB,GAET,MAAM,OAAN,OAAce,EAAUN,EAAGC,GAA3B,YAAoCK,EAAUJ,EAAGC,GAAjD,aAA2DG,EACzDF,EACAC,GAFF,OAOIP,EAAkB,SAAlBA,EAAmBc,GAEvB,IAAIC,EAAIJ,KAAKC,MAAMD,KAAKE,SAAWC,EAAKE,QAExC,OAAID,GAAKtB,EACAO,EAAgBc,IAEvBpB,EAAOqB,GAEFA,IAGT,OACE,yBAAS5B,MAAO,CAAEE,gBAAiBJ,GAAnC,SACE,cAACL,EAAD,CACEI,YAAaA,EACbF,MAAOA,EACPC,OAAQA,EACRE,QAASA,OC/CFgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.257c711c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function QuoteAndAuthor(props) {\r\n  const { quote: quote, author, randomQuote, bgColor } = props;\r\n  return (\r\n    <div className=\"quoteGenerator\" style={{ color: bgColor }}>\r\n      <h2>{quote}</h2>\r\n      <div className=\"author\">\r\n        <div className=\"line\" style={{ backgroundColor: bgColor }}></div>\r\n        <p>{author}</p>\r\n      </div>\r\n      <button\r\n        onClick={() => randomQuote()}\r\n        style={{ backgroundColor: bgColor }}\r\n      >\r\n        new quote\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport QuoteAndAuthor from \"./components/QuoteAndAuthor\";\nimport \"./styles/style.css\";\nimport quotes from \"./quotes.json\";\n\nfunction App() {\n  //state\n  const [num, setNum] = useState(0);\n  const [quote, setQuote] = useState(quotes.quotes[0].quote);\n  const [author, setAuthor] = useState(quotes.quotes[0].author);\n  const [bgColor, setBgColor] = useState(\"white\");\n\n  useEffect(() => {\n    randomQuote();\n  }, []);\n\n  //get random quote and color\n  const randomQuote = () => {\n    let num = randomListIndex(quotes.quotes);\n\n    setQuote(quotes.quotes[num].quote);\n    setAuthor(quotes.quotes[num].author);\n    setBgColor(randomHSL(360, 0, 50, 0, 60, 40));\n  };\n\n  //generate random HSL color\n  const randomHSL = (h, hMin, s, sMin, l, lMin) => {\n    let randomNum = (max, min) => {\n      let num = Math.floor(Math.random() * max);\n      if (num < min) {\n        num = min;\n      }\n      return num;\n    };\n    return `hsl(${randomNum(h, hMin)},${randomNum(s, sMin)}%,${randomNum(\n      l,\n      lMin\n    )}%)`;\n  };\n\n  //generate random list index number\n  const randomListIndex = (list) => {\n    //generate number\n    let i = Math.floor(Math.random() * list.length);\n    //make sure number is different\n    if (i == num) {\n      return randomListIndex(list);\n    } else {\n      setNum(i);\n    }\n    return i;\n  };\n\n  return (\n    <section style={{ backgroundColor: bgColor }}>\n      <QuoteAndAuthor\n        randomQuote={randomQuote}\n        quote={quote}\n        author={author}\n        bgColor={bgColor}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}